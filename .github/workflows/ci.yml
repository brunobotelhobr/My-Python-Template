name: CI
on: [push]
jobs:

  Test-Tasks-Integrity-Linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.11'
    steps:
    - uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.11
    - name: Install Requirements
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install
    - name: Test task info
      run: task info
    - name: Test task upgrade
      run: task upgrade
    - name: Test task sec
      run: task sec
    - name: Test task format
      run: task format
    - name: Test task lint
      run: task lint
    - name: Test task bom
      run: task bom
    - name: Test task req
      run: task req
    - name: Test task test
      run: task test
    - name: Test task pypi-build
      run: task pypi-build
    - name: Test task docker-build
      run: docker build -t test_img:ci-test .
    - name: Test task clear
      run: task clear

  Lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.11'
    steps:
    - uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.11
    - name: Generate lint
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install
        poetry run task lint


        Test-Code:
          runs-on: ${{ matrix.os }}
          strategy:
            matrix:
              os: [ubuntu-latest, macos-latest, windows-latest]
          env:
            OS: ${{ matrix.os }}
            PYTHON: '3.11'
          steps:
          - uses: actions/checkout@master
          - name: Setup Python
            uses: actions/setup-python@master
            with:
              python-version: 3.11
          - name: Generate coverage report
            run: |
              pip install poetry
              poetry config virtualenvs.create false
              poetry install
              pytest --cov=src --cov-report=xml
          - name: Upload coverage to Codecov
            uses: codecov/codecov-action@v3
            with:
              token: ${{ secrets.CODECOV_TOKEN }}
              directory: ./coverage/reports/
              env_vars: OS,PYTHON
              fail_ci_if_error: true
              files: ./coverage.xml
              flags: unittests
              name: codecov-umbrella
              verbose: true

  Test-Code:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.11'
    steps:
    - uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.11
    - name: Generate coverage report
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install
        pytest --cov=src --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage/reports/
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        verbose: true      
        
  Security:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.11'
    steps:
    - uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.11
    - name: Run Security Checks
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.40.0
        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
        pip install poetry
        poetry config virtualenvs.create false
        poetry install
        poetry run task sec

