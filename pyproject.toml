[tool.poetry]
name = "app"
version = "0.1.0"
license = "MIT"
description = ""
authors = ["Bruno Botelho <bruno.botelho.br@gmail.com>"]
maintainers = ["Bruno Botelho <bruno.botelho.br@gmail.com>"]
readme = "README.md"
packages = [{include = "app", from = "src"}]
repository = "https://github.com/brunobotelhobr/My-Python-Template"
homepage = "https://brunobotelhobr.github.io/My-Python-Template/"
keywords = ["python"]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
pylint = "^2.17.2"
pyflakes = "^3.0.1"
mypy = "^1.2.0"
autoflake = "^2.1.0"
pytest = "^7.3.1"
cyclonedx-bom = "^3.11.0"
pytest-cov = "^4.0.0"
bandit = {version = "^1.7.5", extras = ["toml"]}
flake8-bugbear = "^23.3.23"
flake8-docstrings = "^1.7.0"
flake8-tidy-imports = "^4.8.0"
taskipy = "^1.10.4"

[tool.poetry.group.doc.dependencies]
mkdocs-material = "^9.1.6"
mkdocs = "^1.4.2"
mkdocs-material-extensions = "^1.1.1"
pymdown-extensions = "^9.11"
mkdocstrings = {version = "^0.21.2", extras = ["python"]}
mike = "^1.1.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line_length = 79
ignore = "E203"

[tool.isort]
line_length = 79
atomic = true
profile = "black"
skip_gitignore = true

[tool.autoflake]
check = true

[tool.flake8]
max-line-length = 79
ignore = []
per-file-ignores = []
count = true

[tool.mypy]
warn_return_any = true
ignore_missing_imports = true

[tool.pylint]
max-line-length = 79
[tool.pylint.BASIC]
good-names = ["a", "b", "c", "i", "k", "k"]
[tool.pylint.'MESSAGES CONTROL']

[tool.bandit]
exclude_dirs = ["tests"]
tests = []
skips = []

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
src_dir = "src"
docs_version = "0.1.0"
docs_branch = "documentation"
package_dir = { var = "{src_dir}/app", recursive = true }

[tool.taskipy.tasks]
info = { cmd = "poetry env info && poetry check && poetry show", help = "Show project info" }
meta = { cmd = "python python scripts/update-project-properties.py", help = "Update project properties" }
upgrade = { cmd = "poetry self update && poetry update && poetry export", help = "Upgrade all dependencies" }
sec = { cmd = "trivy fs --exit-code 1 --scanners vuln,config,secret . && bandit -c pyproject.toml -r src", help = "Run all Security Checks" }
format = { cmd = "isort --settings-path pyproject.toml src && isort --settings-path pyproject.toml tests && black --config ./pyproject.toml src && black --config ./pyproject.toml tests && autoflake --recursive src && autoflake --recursive tests", help = "Run all Formaters" }
lint = { cmd = "flake8 --config pyproject.toml src && flake8 --config pyproject.toml tests && mypy --config-file pyproject.toml src && mypy --config-file pyproject.toml tests && pylint --rcfile pyproject.toml src && pylint --rcfile pyproject.toml tests", help = "Run all Linters" }
bom = { cmd = "cyclonedx-py -p --format xml -F -o meta/bom/bom.xml && cyclonedx-py -p --format json -F -o meta/bom/bom.json", help = "Generate BOM" }
req = { cmd = "poetry export --format requirements.txt > meta/requirements/requirements.txt && echo '-r requirements.txt' > meta/requirements/requirements-dev.txt && poetry export --with dev --format requirements.txt >> meta/requirements/requirements-dev.txt", help = "Generate Requirements" }
tests = { cmd = "pytest --cov={package_dir} --cov-report term", help = "Run all tests" }
pypi-build = { cmd = "poetry build", help = "Build package for PyPI" }
pypi-auth = { cmd = "echo 'Type PyPI API token:' && read -s PYPI_TOKEN && poetry config pypi-token.pypi $PYPI_TOKEN && unset PYPI_TOKEN", help = "Authenticate to PyPI"}
pypi-publish = { cmd = "poetry publish", help = "Publish package to PyPI" }
docs = { cmd = "mike serve -b {docs_branch}", help = "Run MkDocs server" }
docs-list = { cmd = "mike list -b {docs_branch}", help = "List MkDocs versions" }
docs-build = { cmd = "mike deploy -b {docs_branch} {docs_version} latest", help = "Add actual documentation (version) to the doc branch." }
docs-delete = { cmd = "mike delete -b {docs_branch} {docs_version}", help = "Delete acutal documentation (version) from the doc branch." }
docs-pub = { cmd = "git push --force-with-lease {docs_branch} {docs_branch}", help = "Publish documentation to the doc branch on GitHub." }
clean = { cmd = "rm -rf .venv && rm -rf .pytest_cache && rm -rf .coverage && rm -rf dist && rm -rf site &&find . -type d -name __pycache__ > /dev/null", help = "Clean all generated files" }